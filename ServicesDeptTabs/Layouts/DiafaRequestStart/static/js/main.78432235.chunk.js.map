{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react","id","className","colSpan","align","react_jqxdatetimeinput_esm","theme","formatString","showTimeButton","showCalendarButton","react_jqxbuttons_esm","width","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAmEeA,sBA3DX,SAAAA,EAAYC,GAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACdH,0EAIN,OACIO,EAAA,yBACIA,EAAA,uBAAOC,GAAG,cAAcC,UAAU,iBAC9BF,EAAA,wBACIA,EAAA,oBAAIG,QAAS,EAAGC,MAAM,UAASJ,EAAA,wGAEnCA,EAAA,wBACIA,EAAA,+FACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,0IACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,8HACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,0IACAA,EAAA,wBAAIA,EAAA,cAACK,EAAA,EAAD,CAAkBC,MAAO,eAEjCN,EAAA,wBACIA,EAAA,0IACAA,EAAA,wBAAIA,EAAA,cAACK,EAAA,EAAD,CAAkBC,MAAO,eAEjCN,EAAA,wBACIA,EAAA,0IACAA,EAAA,wBAAIA,EAAA,cAACK,EAAA,EAAD,CAAkBE,aAAc,WAAYC,gBAAgB,EAAMC,oBAAoB,EAAOH,MAAO,YAE5GN,EAAA,wBACIA,EAAA,8HACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,sJACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,mFACAA,EAAA,0BAEJA,EAAA,wBACIA,EAAA,oBAAIG,QAAS,EAAGC,MAAM,UAASJ,EAAA,cAACU,EAAA,EAAD,CAAWJ,MAAO,WAAYK,MAAO,KAArC,4EAlDrCC,kBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0DCVNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,QDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78432235.chunk.js","sourcesContent":["import * as React from 'react';\nimport JqxDateTimeInput from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxdatetimeinput';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport \"./App.css\";\nimport Confirm from \"./Confirm\";\n\nclass App extends React.PureComponent<{}> {\n\n    constructor(props: {}) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div>\n                <table id=\"myFormTable\" className=\"BorderedTable\">\n                    <tr>\n                        <td colSpan={2} align=\"center\"><h3>طلب خدمة ضيافة</h3></td>\n                    </tr>\n                    <tr>\n                        <td>اسم الفعالية</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>مكان انعقاد الفعالية</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>هاتف مشرف الفعالية</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>تاريخ بداية الفعالية</td>\n                        <td><JqxDateTimeInput theme={'material'} /></td>\n                    </tr>\n                    <tr>\n                        <td>تاريخ نهاية الفعالية</td>\n                        <td><JqxDateTimeInput theme={'material'} /></td>\n                    </tr>\n                    <tr>\n                        <td>توقيت استلام الضيافة</td>\n                        <td><JqxDateTimeInput formatString={\"hh:mm tt\"} showTimeButton={true} showCalendarButton={false} theme={'light'} /></td>\n                    </tr>\n                    <tr>\n                        <td>عدد الحضور المتوقع</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>خدمات الضيافة المطلوبة</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>خدمات أخرى</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td colSpan={2} align=\"center\"><JqxButton theme={'material'} width={120} >إرسال الطلب</JqxButton></td>\n                    </tr>\n                </table>\n                \n                \n                \n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = process.env.PUBLIC_URL + '/service-worker.js';\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}